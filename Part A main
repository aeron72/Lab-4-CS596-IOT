#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
/*
  BLE LED Controller

  This program sets up a Bluetooth Low Energy (BLE) server on an ESP32 board.
  It listens for "ON" and "OFF" commands via BLE and toggles an onboard LED accordingly.
*/


#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

#define LED_PIN 13  // Using GPIO 13

BLECharacteristic *pCharacteristic;
// Callback class to handle BLE write events (e.g., when a user sends "ON" or "OFF")
class MyCallbacks: public BLECharacteristicCallbacks {
   void onWrite(BLECharacteristic *pCharacteristic) {
     std::string value = pCharacteristic->getValue(); // Retrieve the value sent from the BLE client

     if (value.length() > 0) {
       Serial.print("Received: ");
       Serial.println(value.c_str());

       if (value == "ON") {
         digitalWrite(LED_PIN, HIGH);  // Turn LED ON
         Serial.println("LED is ON");
       } else if (value == "OFF") {
         digitalWrite(LED_PIN, LOW);   // Turn LED OFF
         Serial.println("LED is OFF");
       }
     }
   }
};

void setup() {
 Serial.begin(115200);
 pinMode(LED_PIN, OUTPUT);
 digitalWrite(LED_PIN, LOW);  // Ensure LED starts OFF

 Serial.println("BLE LED Control - Waiting for commands");
// Initialize BLE and set the device name
 BLEDevice::init("SDSU_LED_CONTROL");
 BLEServer *pServer = BLEDevice::createServer();
 BLEService *pService = pServer->createService(SERVICE_UUID);

 pCharacteristic = pService->createCharacteristic(
                    CHARACTERISTIC_UUID,
                    BLECharacteristic::PROPERTY_READ |
                    BLECharacteristic::PROPERTY_WRITE
                  );

 pCharacteristic->addDescriptor(new BLE2902());
 pCharacteristic->setCallbacks(new MyCallbacks());
 pCharacteristic->setValue("Send ON or OFF");

 pService->start();

 BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
 pAdvertising->addServiceUUID(SERVICE_UUID);
 BLEDevice::startAdvertising();

 Serial.println("BLE server ready! Send ON/OFF from phone.");
}

void loop() {
 delay(1000);  // Keep the loop alive
}
